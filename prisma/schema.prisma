// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id String @db.VarChar(100) @id
  username String @db.VarChar(100)
  avatar String @db.VarChar(100)
  role_id Int @db.Int() @default(1)
  token String @db.VarChar(100)
  growid String? @db.VarChar(100)

  role Role @relation(fields: [role_id], references: [role_id])
  store Store?
  user_item UserItem[]
  order Order[]

  @@map("users")
}

model Role {
  role_id Int @id @db.Int()
  name String @db.VarChar(100)

  users User[]

  @@map("roles")
}

model Store {
  store_id String @db.VarChar(100) @id
  user_id String @db.VarChar(100) 
  store_name String @db.VarChar(100)
  name String @db.VarChar(100)
  world_deposit String? @db.VarChar(100)
  bot_deposit String? @db.VarChar(100)
  last_update_bot String? @db.VarChar(100)
  is_active Boolean @db.TinyInt()
  private_key String @db.VarChar(100)

  user User @relation(fields: [store_id], references: [user_id])
  product Product[]
  order Order[]

  @@map("stores")
}

model Category {
  category_id String @db.VarChar(100) @id
  category_name String @db.VarChar(100)

  product Product[]

  @@map("categorys")
}

model Product {
  product_id String @db.VarChar(100) @id
  store_id String @db.VarChar(100) 
  product_name String @db.VarChar(100) 
  product_description String @db.VarChar(200) 
  category_id String @db.VarChar(100) 
  payment_method String @db.VarChar(100) 
  total_sold Int @db.Int() @default(0)
  image_url String @db.VarChar(100) 
  price Int
  is_active Boolean

  category Category @relation(fields: [category_id], references: [category_id])
  store Store @relation(fields: [store_id], references: [store_id])
  stock StockProduct[]
  order Order[]

  @@map("products")
}

model PaymentMethod {
  payment_id String @id
  payment_name String 

  @@map("payment_methods")
}

model TypesStock {
  type_id Int @id
  type_stock_name String

  stock_product StockProduct[]

  @@map("types_stock")
}

model StockProduct {
  stock_id String @id
  product_id String
  type_id Int
  data String
  file_url String?
  is_sold Boolean 

  type_stock TypesStock @relation(fields: [type_id], references: [type_id])
  product Product @relation(fields: [product_id], references: [product_id])
  user_item UserItem[]

  @@map("stock_products")
}

model UserItem {
  user_item_id String @id
  user_id String
  order_id String
  stock_id String 

  user User @relation(fields: [user_id], references: [user_id])
  stock StockProduct @relation(fields: [stock_id], references: [stock_id])

  @@map("user_items")
}

model TypeStatus {
  type_id Int @id
  type_status_name String

  order Order[]
}

model Order {
  order_id String @id
  user_id String
  store_id String
  product_id String
  price Int
  order_date DateTime
  status Int

  user User @relation(fields: [user_id], references: [user_id])
  store Store @relation(fields: [store_id], references: [store_id])
  product Product @relation(fields: [product_id], references: [product_id])
  status_type TypeStatus @relation(fields: [status], references: [type_id] )

  order_item OrderItem[]
  transaction Transaction?

  @@map("orders")
}

model OrderItem {
  order_item_id String @id
  order_id String
  amount Int
  total_price Int

  order Order @relation(fields: [order_id], references: [order_id])

  @@map("order_items")
}

model Transaction {
  transaction_id String @id
  order_id String @unique

  order Order @relation(fields: [order_id], references: [order_id])
}